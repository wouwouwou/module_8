____________________________Exercise 1____________________________
Operator overloading			--> a technique where operators are implemented in user-defined types with customized logic based on the types of the arguments passed.
type inference					--> analysis of a program to deduce the type of the expression for which it wants to determine the type.
synthesized attribute			--> attributes which get their values from their child nodes
inherited attribute				--> attributes which get their values from their parent / sibling nodes
syntax-directed translation		--> a technique for context-sensitive checking where arbitrary code snippets are produced.



____________________________Exercise 2____________________________
Base types:
	Numbers:
		byte		short		int			long
		float		double
	boolean		char

Java allows building classes, which can be an aggregation of 1 or more base types and / or 1 or more classes.
(Example: Integer, BigInteger, String) These are Constructed Types and also can be viewed as Structures. The
attributes of a class are, however, not ordered.

For arrays Java supports the more simple form of an array, but Lists are also supported.

Polymorphic types are comparable with generics in Java. They are used in (for example) Lists and Maps.

String has a special treatment in Java. For example: 'string + string' is possible.

Enumerations are also supported by Java with a simple 'public enum' declaration.

Java attributes are actually all pointers. The code "a = b" assigns the pointer of b to a.
Pointers can not be manipulated directly, but with "a = new b" (sometimes more complicated) a does
not contain the pointer, but a copy of b.

Type equivalence is determined by the name. If an object A contains only an int and another object B also
contians only an int, they are not the same according to Java.

Java does not provide a mechanism for creating a procedure that can take a variable number of arguments. It does,
however, accept a list as an argument, in which you can store a variable number of attributes.



____________________________Exercise 3____________________________
1)

^		num		bool	str
num		num		-		-
bool	-		-		-
str		str		-		-

+		num		bool	str
num		num		-		-
bool	-		bool	-
str		-		-		str

=		num		bool	str
num		bool	-		-
bool	-		bool	-
str		-		-		bool


2)
1 T.type		<--		F^(T1.type, T2.type)
2 T.type		<--		F+(T1.type, T2.type)
3 T.type		<--		F=(T1.type, T2.type)
4 T.type		<--		T.type
5 T.type 		<--		num.type
6 T.type 		<--		bool.type
7 T.type 		<--		str.type

3)
Synthesized. (from children T1 and T2 or base types)



____________________________Exercise 4____________________________
2)
Action based advantages: Way less code, no need to make a listener class, antlr does it for you.

Listener based advantages: Very simple and clear Antlr grammar, very modular to edit its behavior because of the separation
of grammar and listener.


3)
Adding a println statement before the PAR rule does the same; printing something.
Placing it before the expression rules it gives an error: Following sets of rules are mutually left-recursive
The difference is therefore in that the first two subrules are left-recursive, where the PAR subrule isn't. The left-recurive
condition can be an infinite loop, and therefore infinitely print the message at the begin of the statement.


4)
There exist two types of methods: entrySomething and exitSomething. If the attribute is synthesized, the child nodes should be evaluated first, which
you can do with the entry method. Inherited attributes can use the exit method to pass its type to its parent / siblings.


____________________________Exercise 8____________________________
1)
TABLEBEGIN
TABLEEND
ROWEND
COLSEP
ENTRY

COMMENT -> skip


____________________________Exercise 9____________________________
1)
syntaxError of BaseErrorListener has 6 parameters:
* Recognizer<?, ?> recognizer		| the recognizer which recognized the error
* Object offendingSymbol			| the symbol where the error occurred
* int line							| the line where the error occurred
* int charPositionInLine			| the char position in the line where the error occurred
* String msg						| the error message
* RecognitionException e			| extension of RuntimeException, specified for the recognizer in the first parameter